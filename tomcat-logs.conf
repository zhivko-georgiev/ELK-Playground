input {
  file {
    type => "production"
    path =>"/tmp/logs/prod/**/tomcat.log.*"
    start_position =>"beginning"
    sincedb_path => "/home/elk/logstash-5.1.1/.sincedb"
    codec => multiline {
      patterns_dir => ["/home/elk/logstash-5.1.1/patterns/grok-patterns"]
      pattern => "(^%{TOMCAT_DATESTAMP})|(^%{CATALINA_DATESTAMP})"
      negate => true
      what => "previous"
    }
  }
  file {
    type => "staging"
    path =>"/tmp/logs/stag/**/tomcat.log.*"
    start_position =>"beginning"
    sincedb_path => "/home/elk/logstash-5.1.1/.sincedb"
    codec => multiline {
      patterns_dir => ["/home/elk/logstash-5.1.1/patterns/grok-patterns"]
      pattern => "(^%{TOMCAT_DATESTAMP})|(^%{CATALINA_DATESTAMP})"
      negate => true
      what => "previous"
    }
  }
}

filter {
    if "_grokparsefailure" in [tags] {
      drop { }
    }
    grok {
      patterns_dir => ["/home/elk/logstash-5.1.1/patterns/grok-patterns"]
      break_on_match => false
      match => ["message", "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel}%{SPACE}\[%{JAVACLASS:javaclass}\]%{SPACE}%{JAVALOGMESSAGE:logmessage}"]
      match => ["path","%{GREEDYDATA}/%{GREEDYDATA:filename}\.log"]
      match => ["path", "(?<appsrv>appsrv.{1})"]
      remove_field => ["message"]
    }
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS"]
      remove_field => ["timestamp"]
    }
}

output{
  if [type] == "production" { 
    elasticsearch {
      manage_template => false
      index => "production-%{appsrv}-%{+YYYY.MM.dd}"
      hosts => ["localhost"]
    }
  }
  if [type] == "staging" { 
    elasticsearch {
      manage_template => false
      index => "staging-%{appsrv}-%{+YYYY.MM.dd}"
      hosts => ["localhost"]
    }
  }
}
